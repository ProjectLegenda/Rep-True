Pre-requisite:

    Install original python3.6.5+ from https://www.python.org
 
    NOTE:Please don't install anaconda or ipython for this tools because original python depend on variable PYTHONPATH when searching for user defined site packages 
    But others may not, but if you are familiar with all distribution of python, you can install other distribution and hack launch shell script yourself

    Install Standard site-package from PyPI and make sure whenever you launch python process and packages below are accessible and importable without changing sys.path explicitly 

    pandas
    jieba
    numpy
    pyhive
    sqlalchemy
    thrift
    Cython
    sklearn

    export PATH and let shell know where to find your python3 binary
    
    example: 
    export PATH=$PATH:/usr/local/bin
 

Installing smarttool project 

    tar -xf Smarttool.tar
    cd Smarttool 
    export SMARTTOOL_HOME=`pwd`
    
    if you want to refer the smart tool shell script you can add $SMARTTOOL_HOME/bin into your path like 
    export PATH=$PATH:$SMARTTOOL_HOME/bin
    

Launching smarttool server: 
  
    $SMARTTOOL_HOME/bin/smarttool.sh localhost 18000 
    
    ## $1 is the IP $2 is the port of smarttool server 
    # you can nohup smarttool.sh localhost 18000 & to put it to background

Smarttool Client:
    
    Change your directory to $SMARTTOOL_HOME/lib or add $SMARTTOOL_HOME/lib to your $PYTHONPATH 

    Launch python3:
    
    In python3 session:

    from smartclient import Smartclient
    stclient = Smartclient('http://localhost:18000') 
    stclient.getDict('../resource/article1.json')
    
    
    # Input of stclient.getDict is a json file with title&content as necessary key   
    # Return of method getDict is python dictionary 

    if you want to use xmlclient directly,the following method is the way to control remote call
   
    addItemtoQueue
    getItemfromDict 
          


Shutting down smarttool rpc server:
    
    If you did not nohup the smartserver,the main process could be shutdown by KeyInterrupt
    If you nohup the smartserver then you call a shutdown method from smartclient as follows:

    Example:
    Launch python3:
   
    In python3 session:

    from smartclient import Smartclient
    stclient = Smartclient('http://localhost:18000')
    stclient.shutdown()   

Relaunching algorithm:
    
    The algorithm could be re-launched without shutting down the rpcserver 
    After this call,all data algorithm need will be reloaded into memory. IO will happen
    
    Example:
    Launch python3:
   
    In python3 session:

    from smartclient import Smartclient
    stclient = Smartclient('http://localhost:18000')
    stclient.reloadWorker()

   
Caveats: 
    Enviorment variable SMARTTOOL_HOME must be set 
